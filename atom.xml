<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Study4Fun</title>
  
  <subtitle>学而时习之</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://study4.fun/"/>
  <updated>2020-05-18T09:40:40.369Z</updated>
  <id>https://study4.fun/</id>
  
  <author>
    <name>Mii Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019的闲言碎语</title>
    <link href="https://study4.fun/2020/01/01/2019-comments/"/>
    <id>https://study4.fun/2020/01/01/2019-comments/</id>
    <published>2020-01-01T08:45:58.000Z</published>
    <updated>2020-05-18T09:40:40.369Z</updated>
    
    <content type="html"><![CDATA[<p>回顾总是有种从时间线开始的惯性。2019 年开始于天津不好吃的本地餐厅，结束于一顿火烧云不好吃的外卖。如同不好吃的饭，其实这一年经历的过程也算不上顺遂心意。</p><h1 id="平行的工作线"><a href="#平行的工作线" class="headerlink" title="平行的工作线"></a>平行的工作线</h1><p>年前的两个月忙着做实验室的项目，年后开始准备实习的事情。我常说自己足够幸运，在应该做某件事的时候就去做了这件事，这样尽力就好。但这也只是在事后对于自己的些微自嘲而已，我还是改不掉过分焦虑的坏毛病。正如高考前失眠，考研前默背政治到半夜，准备实习的我还是经常会自己一个人默默焦虑地胡思乱想到失眠。</p><p>中间经历了其实不算多的面试，因为想要投的岗位对口的其实并不算多。在实验室的经历让我走了一条和别的同学不太一样的岗位，得益于平时的兴趣比较杂比较宽泛，算是很幸运的拿到了实习岗位。其实回顾来看，最后的结果其实是超乎于我自己意料之外的，因为入职后见过身边远远优秀与我的同学太多。</p><p>如果对当前的选择感到迷茫，不如找一个能看清方向的人交流，远比自己尝试碰壁或者和同类人无效讨论要有效得多。希望自己能在以后的经历中谨记住这一点。</p><p>工作了三四个月，回顾下其实觉得收益到最多的反而是工作方式。很多时候，我们抱怨工作枯燥，内容无趣。但总是会有人能从这些枯燥的工作中提取出更有效的东西，提高自己的效率，提高自己的思考深度，这让我真切体会到平凡和优秀的区别。说和做，差的总是很远。</p><p>后面回到学校准备毕设中期，除了完成一篇自己之前觉得有点难度的水论文，倒也没有什么大的波澜。</p><h1 id="平行的生活线"><a href="#平行的生活线" class="headerlink" title="平行的生活线"></a>平行的生活线</h1><p>对于个人生活来说，19 年真的是很重要的一年。不同于工作上能够絮絮叨叨说出个所以然，对于我来说，生活是由一个个或难忘或开心或感动，也或是平凡幸福的时刻组成的。很多个这样的时刻会慢慢沉淀成一种潜移默化的东西，支撑自己在各种困难的时候坚持过去。今年这样的时刻格外的多，或许因为不再是一个人的原因吧。</p><p>如果说要给自己的 2020 寄托一些什么希冀一些什么，大概还是一些意识到却没有做到的东西。</p><ol><li>能够想到就去做，但是还没坚持做下去。</li><li>能够开始反思，但是还没及时改变。</li></ol><p>其实如果能做到这两点，总感觉 2020 就会好。但是人总是有点惰性的，我也还是那个对自己有限悲观的人。接下来的一年，能做到一个，也足够让我满足了。毕竟，顺遂心意永远是最重要的。拧巴地生活，还不如维持现状呢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;回顾总是有种从时间线开始的惯性。2019 年开始于天津不好吃的本地餐厅，结束于一顿火烧云不好吃的外卖。如同不好吃的饭，其实这一年经历的过程也算不上顺遂心意。&lt;/p&gt;
&lt;h1 id=&quot;平行的工作线&quot;&gt;&lt;a href=&quot;#平行的工作线&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="日记" scheme="https://study4.fun/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="杂项" scheme="https://study4.fun/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>Go学习笔记——基础知识</title>
    <link href="https://study4.fun/2019/05/17/go-basic/"/>
    <id>https://study4.fun/2019/05/17/go-basic/</id>
    <published>2019-05-17T09:32:00.000Z</published>
    <updated>2020-05-18T09:40:40.161Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>静态语言，支持运行时动态类型；支持隐式类型推导；</li><li>接口基于<a href="https://zh.wikipedia.org/zh-hans/%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener">Duck 模型</a>；仅通过接口支持多态；不支持泛型但支持反射；</li><li>编译成可执行程序直接执行；支持自动垃圾回收；语言原生支持并发；跨平台；多应用于云计算基础设施软件、中间件、区块链等。</li></ul><h2 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 文件名：hello.<span class="keyword">go</span></span><br><span class="line"># 包名，main为可执行程序的包名</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"># 引入外部包fmt（标准输入输出）</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"># 函数声明，main代表程序入口函数</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">"Hello, world.\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：</p><ul><li>Go 的源程序默认使用 UTF-8 编码</li><li>语句结尾的分号可以省略</li><li>“{”必须在函数头所在行尾部，不能单独起一行</li><li>main 函数所在的包名必须是 main。</li></ul><p>编译运行</p><ul><li>编译 go build hello.go</li><li>运行 ./hello</li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>（仅记录与 Java 不同的）</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>常量声明 const、变量定义 var、函数定义 func、延迟执行 defer、 结构类型定义 struct、通道类型 chan</p><h3 id="数据类型标识"><a href="#数据类型标识" class="headerlink" title="数据类型标识"></a>数据类型标识</h3><table><thead><tr><th>类型</th><th>标识</th></tr></thead><tbody><tr><td>整型</td><td>byte int int8-int64 uint uint8-uint64 uintptr （byte 就是 uint8）</td></tr><tr><td>浮点数</td><td>float32 float64 （自动类型推断为 float64）</td></tr><tr><td>复数</td><td>complex64 complex128 （由两个 float 构成，对应实部和虚部）</td></tr><tr><td>字符</td><td>rune</td></tr><tr><td>接口</td><td>error</td></tr><tr><td>连续枚举类型</td><td>iota</td></tr><tr><td>匿名变量</td><td>_</td></tr></tbody></table><p>iota 用法: iota 用于常量声明中，初始值为 0，逐行增加</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">a = <span class="literal">iota</span>          <span class="comment">//iota=0,a=0</span></span><br><span class="line">b                 <span class="comment">//iota=1,b=1</span></span><br><span class="line">c = <span class="number">3</span>             <span class="comment">//iota=2,未使用，c=3</span></span><br><span class="line">d = <span class="number">1</span> &lt;&lt; <span class="literal">iota</span>     <span class="comment">//iota=3,d=8</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注意：Go 语言里自增和自减是语句而不是表达式[1]</p><h2 id="变量和常量"><a href="#变量和常量" class="headerlink" title="变量和常量"></a>变量和常量</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显式声明，value可以是表达式，不指定则初始化为类型零值，声明后立即分配空间</span></span><br><span class="line"><span class="keyword">var</span> varName dataType [ = value]</span><br><span class="line"><span class="comment">//短类型声明，只能出现在函数内，自动进行数据类型推断</span></span><br><span class="line">varName := value</span><br><span class="line"></span><br><span class="line"><span class="comment">//支持多个类型变量同时声明并赋值</span></span><br><span class="line">a, b := <span class="number">1</span>, <span class="string">"hello"</span></span><br></pre></td></tr></table></figure><h3 id="字符串和切片"><a href="#字符串和切片" class="headerlink" title="字符串和切片"></a>字符串和切片</h3><ul><li>字符串可以通过类似数组索引的方式访问，但是不能修改</li><li>字符串转换为切片[]byte()在数据量大的时候要慎用，因为转换的时候需要复制内容</li><li>字符串的底层实现是一个指向字节数组的指针和字节数组长度</li><li>基于字符串创建的切片指向原字符串指向的字符数组，不可修改</li></ul><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><ul><li>结构体指针访问结构体字段仍然使用”.”操作符，没有“-&gt;”</li><li>不支持指针运算（GO 支持垃圾回收，语言层面禁止指针运算）</li><li>允许返回局部变量地址</li></ul><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>切片（可变数组）维护三个元素——指向底层数组的指正、切片元素数量、底层数组容量</p><p>创建方式：数组索引、make</p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Go 内置的 map 不是并发安全的，需要时用 sync 包内的 map 保证并发安全</p><p>map 键值对的修改不能通过 map 引用直接修改键值，需要 KV 整体赋值</p><h2 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h2><h3 id="If-else"><a href="#If-else" class="headerlink" title="If-else"></a>If-else</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> initialization; condition &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><ul><li>条件表达式支持任意支持相等比较运算的类型变量</li><li>switch 后面可以带上初始化语句</li><li>case 后可以使用多个值比较，使用逗号分隔</li><li>配合使用可以进行类型查询</li></ul><h3 id="Goto"><a href="#Goto" class="headerlink" title="Goto"></a>Goto</h3><ul><li>goto 需要配合标签使用</li><li>goto 只能在函数内跳转，但是不能跳过内部变量声明语句，只能跳过同级作用域或上层作用域</li></ul><h1 id="Q："><a href="#Q：" class="headerlink" title="Q："></a>Q：</h1><p>【1】这是否意味着自增或自减是原子操作？<br>答：不是。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;特点&quot;&gt;&lt;a href=&quot;#特点&quot; class=&quot;headerlink&quot; title=&quot;特点&quot;&gt;&lt;/a&gt;特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;静态语言，支持运行时动态类型；支持隐式类型推导；&lt;/li&gt;
&lt;li&gt;接口基于&lt;a href=&quot;https://zh.wikipe
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://study4.fun/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Golang" scheme="https://study4.fun/tags/Golang/"/>
    
      <category term="学习笔记" scheme="https://study4.fun/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>标题</title>
    <link href="https://study4.fun/2018/09/09/%E8%8B%B1%E6%96%87%E6%A0%87%E9%A2%98/"/>
    <id>https://study4.fun/2018/09/09/%E8%8B%B1%E6%96%87%E6%A0%87%E9%A2%98/</id>
    <published>2018-09-09T05:55:00.000Z</published>
    <updated>2020-05-18T09:40:40.165Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="杂项" scheme="https://study4.fun/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="网络配置" scheme="https://study4.fun/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
      <category term="DNS" scheme="https://study4.fun/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes学习笔记——Pod调度</title>
    <link href="https://study4.fun/2018/09/09/k8s-pod-scheduling/"/>
    <id>https://study4.fun/2018/09/09/k8s-pod-scheduling/</id>
    <published>2018-09-09T05:55:00.000Z</published>
    <updated>2020-05-18T09:40:40.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-Deployment-RC-全自动调度"><a href="#0x01-Deployment-RC-全自动调度" class="headerlink" title="0x01. Deployment/RC 全自动调度"></a>0x01. Deployment/RC 全自动调度</h1><p><strong>效果：</strong>在集群内始终维持用户指定的副本数量</p><p><strong>使用：</strong>spec.replicas</p><p><strong>原理：</strong>系统自动调度算法。由 Master 的 Scheduler 经过一系列算法计算得出，用户无法干预调度过程和结果。</p><h1 id="0x02-NodeSelector"><a href="#0x02-NodeSelector" class="headerlink" title="0x02. NodeSelector"></a>0x02. NodeSelector</h1><p><strong>效果：</strong>通过 Node 的标签和 Pod 的 nodeSelector 属性进行匹配，将 Pod 调度到指定的 Node 上</p><p><strong>使用：</strong></p><ol><li>为目标 Node 打标签</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes &lt;node-name&gt; &lt;label-key&gt;&#x3D;&lt;label-value&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 Pod 定义中加上 nodeSelector 的设置</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pod.yaml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">nodeSelector:</span></span><br><span class="line">  <span class="string">&lt;label-key&gt;:</span> <span class="string">&lt;your-selected-label-name&gt;</span></span><br></pre></td></tr></table></figure><p><strong>补充：</strong></p><ul><li>如果多个 Node 定义了相同的标签，则会根据调度算法从这组 Node 中挑选一个可用的 Node 进行调度</li><li>若 Pod 指定的 nodeSelector 条件集群中不存在符合的节点，则该 Pod 无法被成功调度，即使集群中还有可用的 Node</li></ul><h1 id="0x03-亲和性调度"><a href="#0x03-亲和性调度" class="headerlink" title="0x03. 亲和性调度"></a>0x03. 亲和性调度</h1><p>篇幅原因，另外一篇单独记录</p><h1 id="0x04-污点-Taints-和容忍-Tolerations"><a href="#0x04-污点-Taints-和容忍-Tolerations" class="headerlink" title="0x04. 污点(Taints)和容忍(Tolerations)"></a>0x04. 污点(Taints)和容忍(Tolerations)</h1><p><strong>效果：</strong>Pod 无法在标记了 Taint 属性的节点上运行, 同时，设置了 Tolerations 的 Pod 可以运行在标注了 Taint 的 Node 上</p><p><strong>使用：</strong></p><ol><li>为 Node 设置 Taint 信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes node1 key1&#x3D;value1:NoSchedule</span><br></pre></td></tr></table></figure><ol start="2"><li>在 Pod 的配置文件中配置 tolerations 属性</li></ol><p>tolerations:</p><ul><li>key: “key”</li></ul><p>operator: “Equal”</p><p>value: “value”</p><p>effect: “NoSchdule”</p><p><strong>补充：</strong></p><ul><li>Taint 和 Toleration 声明需要保持对应一致，且 operator 需要为 Exists 或者 Equal（Equal 需要指定相等 value）；</li><li>空 key 配合 Exists 能够匹配所有键值，空 effect 匹配所有 effect；</li><li>effect 取值也可以设置为 Prefer，例如 PreferNoSchedule，视为软限制；</li><li>同个 Node 可以设置多个 Taint，对应的，Pod 也可以设置多个 Toleration。</li></ul><h1 id="0x05-DaemonSet"><a href="#0x05-DaemonSet" class="headerlink" title="0x05. DaemonSet"></a>0x05. DaemonSet</h1><p><strong>效果：</strong>在每个 Node 上调度运行同一个（种）Pod，例如日志采集、性能监控、存储的 Daemon 进程</p><p><strong>使用：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br></pre></td></tr></table></figure><p><strong>补充：</strong></p><p>除了使用系统内置算法在每台 Node 上调度外，也可以在 Pod 定义中使用 NodeSelector 或者 NodeAffinity 来指定满足料件的 Node 范围进行调度</p><h1 id="0x06-批处理调度"><a href="#0x06-批处理调度" class="headerlink" title="0x06. 批处理调度"></a>0x06. 批处理调度</h1><p><strong>效果：</strong>并行/串行启动多个计算进程去处理一批工作项（Work Item，下称 WI），处理完成后，批处理任务结束</p><p><strong>任务模式分类：</strong></p><ul><li><strong>Job Template Expansion 模式</strong>：Job 和 WI 一对一对应，适用于 WI 数量少，但是单 WI 处理数据量大的场景；</li><li><strong>Queue with Pod Per Work Item 模式</strong>：使用一个任务队列存放 WI，Job 作为 Consumer 去完成 WI（对应的，Job 会启动多个 Pod，每个 Pod 对应一个 WI），可用 MQ 实现；</li><li><strong>Queue with Variable Pod Count 模式</strong>：与 2 模式类似，但是 Job 启动的 Pod 数量是可变的，可用 Redis 或数据库实现；</li><li><strong>Single Job with Static Work Assignment 模式</strong>：一个 Job 产生多个 Pod，但是采用程序静态方式分配任务（Kubernetes 不支持，书中所写）。</li></ul><p><strong>Job 分类：</strong></p><ul><li><strong>Non-parallel Jobs</strong>：一个 Job 启动一个 Pod，Pod 正常结束则 Job 结束。</li><li><strong>Parallel Jobs with a fixed completion count</strong>：Job 会启动多个 Pod（数目为 spec.completions），正常结束的 Pod 达到这个数目后 Job 结束。spec.parallelism 可以用来控制并行度。</li><li><strong>Parallel Jobs with a work queue</strong>：WI 在 Queue 中存放，无法设置并行度参数。每个 Pod 都能够独立判断是否还有任务需要处理，同时，一个 Pod 成功结束则其他 Pod 必定处于即将结束、退出的状态，且 Job 不会再启动新的 Po）。所有 Pod 结束，且至少一个 Pod 成功结束则 Job 算成功结束。</li></ul><p>（个人理解：上述的规则说明其实是在说所有 Pod 表现为同一整体，Pod 启动失败会重启是一种容错机制。然而从整个过程的跨度来看，无需关心失败启动的数目，只要不是所有 Pod 全部失败结束，只需存在一个成功结束的 Pod 即表明 Job 流程内的其他划分任务都正常完成，整体任务也已成功完成。）</p><h1 id="0x07-定时任务"><a href="#0x07-定时任务" class="headerlink" title="0x07. 定时任务"></a>0x07. 定时任务</h1><p><strong>效果：</strong>定期触发任务执行</p><p><strong>使用：</strong></p><ol><li>在 API Server 启动进程上添加配置参数</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--runtime-config=batch/v2alpha1=true</span><br></pre></td></tr></table></figure><ol start="2"><li>编写 Cron Job 配置文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#cron.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v2alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">CronJob</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">"*/1 * * * *"</span></span><br></pre></td></tr></table></figure><p>2.</p><p>schedule 格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Min Hour DayOfMonth Month DayOfWeek</span><br></pre></td></tr></table></figure><p>2.</p><p>*表示任意值，即每个时间单元节点都会触发</p><p>/表示开始触发的时间，例如 5/20，表明第一次触发在第 5 个时间单位，此后每隔 20 个时间单位触发</p><h1 id="0x08-自定义调度器"><a href="#0x08-自定义调度器" class="headerlink" title="0x08. 自定义调度器"></a>0x08. 自定义调度器</h1><p>在 Pod 中提供自定义的调度器名称，则默认调度器就会失效，转而使用指定的调度器完成对应 Pod 的调度，自定义的调度器需要通过 kube-proxy 来运行，如果自定义调度器始终未启动，则 Pod 将会卡 Pending 状态。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">schedulerName:</span> <span class="string">my-scheduler</span></span><br></pre></td></tr></table></figure><h1 id="0x09-补充"><a href="#0x09-补充" class="headerlink" title="0x09. 补充"></a>0x09. 补充</h1><ul><li>Admission controller 需要仔细研究</li><li>TaintBasedEviction 和 Eureka 中的驱逐机制（包括 SELF PRESERVATION)是否在设计层面上有一定的共通点</li><li>自定义调度器实现有时间需要手动验证一次</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x01-Deployment-RC-全自动调度&quot;&gt;&lt;a href=&quot;#0x01-Deployment-RC-全自动调度&quot; class=&quot;headerlink&quot; title=&quot;0x01. Deployment/RC 全自动调度&quot;&gt;&lt;/a&gt;0x01. Deploym
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://study4.fun/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="学习笔记" scheme="https://study4.fun/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Kubernetes" scheme="https://study4.fun/tags/Kubernetes/"/>
    
      <category term="Pod" scheme="https://study4.fun/tags/Pod/"/>
    
  </entry>
  
  <entry>
    <title>校园网下OpenWrt配置DNS</title>
    <link href="https://study4.fun/2018/09/09/config-dns/"/>
    <id>https://study4.fun/2018/09/09/config-dns/</id>
    <published>2018-09-09T05:55:00.000Z</published>
    <updated>2020-05-18T09:40:40.337Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章的末尾写到，初次配置 OP 系统时候在校内网实现了 IPV6 穿透，但是 DNS 出现了问题。查阅资料后发现与 OP 的反域名劫持保护机制有关系，下面详述一下。</p><h1 id="0x02-OP-的反域名劫持保护"><a href="#0x02-OP-的反域名劫持保护" class="headerlink" title="0x02 OP 的反域名劫持保护"></a>0x02 OP 的反域名劫持保护</h1><p>OP 的反域名劫持保护在默认情况是开开启的，具体设置在<code>/etc/config/dhcp</code>下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config dnsmasq</span><br><span class="line">    option rebind_protection &#39;1&#39;</span><br></pre></td></tr></table></figure><p>在反域名劫持保护未关闭的情况下，由于上级 dns 返回的地址是个私有局域网地址，所以被看作是一次域名劫持，从而丢弃了解析的结果。</p><p>直接的方法就是将上面的字段值改为<code>0</code>，关闭即可。<br>在 GUI 配置界面等同于将<br><code>Network-&gt;DHCP DNS-Server Settings-&gt;General Settings-&gt;Rebind protection</code>的勾取消掉。</p><p>再仔细查看文档发现也可以通过白名单的方式放行想要解析的内网域名，更为安全,此时 Rebind protection 也是处于开启状态，上面的关闭操作不需要进行。而具体修改的操作示例如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config dnsmasq</span><br><span class="line">    list rebind_domain &#39;bupt.edu.cn&#39;</span><br><span class="line">    list rebind_domain &#39;byr.cn&#39;</span><br></pre></td></tr></table></figure><p>表示在反域名劫持保护情况下，将<code>bupt.edu.cn</code>,<code>byr.cn</code>域名加入白名单，允许返回内网地址。<br>在 GUI 配置界面等同于在<br><code>Network-DHCP DNS-Server Settings-General Settings-Domain whitelist</code>添加想要解析的内网域名。</p><h1 id="0x03-自定义-DNS-规则"><a href="#0x03-自定义-DNS-规则" class="headerlink" title="0x03 自定义 DNS 规则"></a>0x03 自定义 DNS 规则</h1><p>在学校 DNS 偶尔抽风或者速度慢的情况下，产生了自定义 DNS 的想法。由于教务系统等系统的访问需要，在各个客户端修改 hosts 略显麻烦，并且 DNSmasq 亦可以实现广告屏蔽，因此采用 DNSmasq 来实现不同的 DNS 解析。<br>预期需求为<code>bupt.edu.cn</code>, <code>byr.cn</code>域名使用校内 DNS 解析，其他地址使用公共 DNS 解析（以 114 为例）。</p><h2 id="修改-Wan-口-DNS"><a href="#修改-Wan-口-DNS" class="headerlink" title="修改 Wan 口 DNS"></a>修改 Wan 口 DNS</h2><p>Wan 口 DNS 主要控制路由器访问网络使用的 DNS 服务器。例如，路由器安装软件需要访问网络，那么所使用的 DNS 服务器就是这个。</p><p>在<code>/etc/config/network</code>文件中的 wan 接口添加两行 peerdns 以及 dns 字段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config interface &#39;wan&#39;</span><br><span class="line">    ......</span><br><span class="line">    option peerdns &#39;0&#39;</span><br><span class="line">    option dns &#39;114.114.114.114&#39;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure><p>重启 network 服务后生效。<br>在 GUI 配置界面等同于在<code>Network-Interface-Wan-Edit-Common Configuration-Advanced Settings</code>中取消<code>Use DNS servers advertised by peer</code>的勾选，并在<code>Use custom DNS servers</code>添加默认的 DNS 服务器。</p><h2 id="修改-Lan-口-DNS（可跳过）"><a href="#修改-Lan-口-DNS（可跳过）" class="headerlink" title="修改 Lan 口 DNS（可跳过）"></a>修改 Lan 口 DNS（可跳过）</h2><p>LAN 口 DNS 主要控制连接到路由器的设备使用的 DNS。例如，连到路由的电脑上网时使用的 DNS 服务器就在这里设置。</p><p>一般情况下，Lan 和 Wan 口 DNS 保持一致即可。如若有需要，修改<code>/etc/config/dhcp</code>文件中 dnsmasq 的 resolvfile 指向即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config dnsmasq</span><br><span class="line">    ....</span><br><span class="line">    option resolvfile &#39;&#x2F;etc&#x2F;resolv.dnsmasq.conf&#39;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>同时需要在<code>/etc/resolv.dnsmasq.conf</code>下新建对应的配置文件。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 2001:4860:4860::8888</span><br></pre></td></tr></table></figure><h2 id="修改-Dns-自定义的内网解析规则"><a href="#修改-Dns-自定义的内网解析规则" class="headerlink" title="修改 Dns 自定义的内网解析规则"></a>修改 Dns 自定义的内网解析规则</h2><p>接下来就是配置校内域名使用的 DNS 解析地址。修改<code>/etc/config/dhcp</code>文件中 dnsmasq。<br>首先是删除下面两行配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config dnsmasq</span><br><span class="line">    ....</span><br><span class="line">    option filterwin2k &#39;0&#39;</span><br><span class="line">    option nonegcache &#39;0&#39;</span><br><span class="line">    ....</span><br></pre></td></tr></table></figure><p>其次添加 list server 字段，对<code>bupt.edu.cn</code>, <code>byr.cn</code>相关域名使用校内 DNS 解析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config dnsmasq</span><br><span class="line">    list server &#39;&#x2F;bupt.edu.cn&#x2F;10.3.9.5&#39;</span><br><span class="line">    list server &#39;&#x2F;byr.cn&#x2F;10.3.9.5&#39;</span><br></pre></td></tr></table></figure><p>在 GUI 配置界面等同于在<br><code>Network-DHCP and DNS-Server Settings-General Settings-DNS forwardings</code>添加对应域名的 DNS 解析服务器地址。</p><h1 id="0x04-后话"><a href="#0x04-后话" class="headerlink" title="0x04 后话"></a>0x04 后话</h1><p>DNSmasq 的用法远不止于此，可用来内网域名 IP 映射代替 hosts，自定义域名解析规则屏蔽广告等，有时间会再研究。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在上一篇文章的末尾写到，初次配置 OP 系统时候在校内网实现了 IPV6 穿透，但是 DNS 出现了问题。查阅资料后发现与 OP 的反域名劫持保护机制有关系，下面详述一下。&lt;/p&gt;
&lt;h1 id=&quot;0x02-OP-的反域名劫持保护&quot;&gt;&lt;a href=&quot;#0x02-OP-的反
      
    
    </summary>
    
    
      <category term="杂项" scheme="https://study4.fun/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="网络配置" scheme="https://study4.fun/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
      <category term="DNS" scheme="https://study4.fun/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>双栈网络配置路由器的ipv6穿透</title>
    <link href="https://study4.fun/2016/03/20/config-ipv6/"/>
    <id>https://study4.fun/2016/03/20/config-ipv6/</id>
    <published>2016-03-20T14:47:00.000Z</published>
    <updated>2020-05-18T09:40:40.385Z</updated>
    
    <content type="html"><![CDATA[<p>本教程测试过程基于 Newifi Y2 路由器，系统为 PandoraBox，理论上 OpenWrt 原生同样适用。</p><h1 id="1-修改路由器的软件源"><a href="#1-修改路由器的软件源" class="headerlink" title="1.修改路由器的软件源"></a>1.修改路由器的软件源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dest root &#x2F;</span><br><span class="line">dest ram &#x2F;tmp</span><br><span class="line">lists_dir ext &#x2F;var&#x2F;opkg-lists</span><br><span class="line">option overlay_root &#x2F;overlay</span><br><span class="line">src&#x2F;gz 14.09_base http:&#x2F;&#x2F;downloads.openwrt.org.cn&#x2F;PandoraBox&#x2F;ralink&#x2F;packages&#x2F;base</span><br><span class="line">src&#x2F;gz 14.09_telephony http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;chaos_calmer&#x2F;15.05&#x2F;ramips&#x2F;mt7620&#x2F;packages&#x2F;telephony</span><br><span class="line">src&#x2F;gz 14.09_packages http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;chaos_calmer&#x2F;15.05&#x2F;ramips&#x2F;mt7620&#x2F;packages&#x2F;packages</span><br><span class="line">src&#x2F;gz 14.09_routing http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;chaos_calmer&#x2F;15.05&#x2F;ramips&#x2F;mt7620&#x2F;packages&#x2F;routing</span><br><span class="line">src&#x2F;gz 14.09_management http:&#x2F;&#x2F;downloads.openwrt.org&#x2F;chaos_calmer&#x2F;15.05&#x2F;ramips&#x2F;mt7620&#x2F;packages&#x2F;management</span><br><span class="line">arch ralink 1</span><br><span class="line">arch all 2</span><br><span class="line">arch ramips_24kec 3</span><br></pre></td></tr></table></figure><p>注:软件源由于硬件配置不同的会有所区别，Newifi 是 MT7620 方案，其他芯片方案的请移步以下两个网址自行匹配：</p><blockquote><p>OpenWrt 中文网址  <a href="http://downloads.openwrt.org.cn/" target="_blank" rel="noopener">http://downloads.openwrt.org.cn/</a><br>OpenWrt download area <a href="https://downloads.openwrt.org/" target="_blank" rel="noopener">https://downloads.openwrt.org/</a></p></blockquote><h1 id="2-配置-Odhcpd"><a href="#2-配置-Odhcpd" class="headerlink" title="2.配置 Odhcpd"></a>2.配置 Odhcpd</h1><ul><li>软件包中更新并安装最新版本的 odhcpd</li><li>修改 dhcp 文件（文件路径：/etc/config/dhcp，不熟悉 ssh 的可以使用 winscp 修改)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">config dnsmasq</span><br><span class="line">option domainneeded &#39;1&#39;</span><br><span class="line">option boguspriv &#39;1&#39;</span><br><span class="line">option filterwin2k &#39;0&#39;</span><br><span class="line">option localise_queries &#39;1&#39;</span><br><span class="line">option rebind_protection &#39;1&#39;</span><br><span class="line">option rebind_localhost &#39;1&#39;</span><br><span class="line">option local &#39;&#x2F;lan&#x2F;&#39;</span><br><span class="line">option domain &#39;lan&#39;</span><br><span class="line">option expandhosts &#39;1&#39;</span><br><span class="line">option nonegcache &#39;0&#39;</span><br><span class="line">option authoritative &#39;1&#39;</span><br><span class="line">option readethers &#39;1&#39;</span><br><span class="line">option leasefile &#39;&#x2F;tmp&#x2F;dhcp.leases&#39;</span><br><span class="line">option resolvfile &#39;&#x2F;tmp&#x2F;resolv.conf.auto&#39;</span><br><span class="line">option localservice &#39;1&#39;</span><br><span class="line"></span><br><span class="line">config dhcp &#39;lan&#39;</span><br><span class="line">option interface &#39;lan&#39;</span><br><span class="line">option start &#39;100&#39;</span><br><span class="line">option limit &#39;150&#39;</span><br><span class="line">option leasetime &#39;12h&#39;</span><br><span class="line">option dhcpv6 &#39;hybrid&#39;</span><br><span class="line">option ra &#39;hybrid&#39;</span><br><span class="line">option ndp &#39;hybrid&#39;</span><br><span class="line">option ra_management &#39;1&#39;</span><br><span class="line"></span><br><span class="line">config dhcp &#39;wan&#39;</span><br><span class="line">option interface &#39;wan&#39;</span><br><span class="line">option ignore &#39;1&#39;</span><br><span class="line"></span><br><span class="line">config odhcpd &#39;odhcpd&#39;</span><br><span class="line">option maindhcp &#39;0&#39;</span><br><span class="line">option leasefile &#39;&#x2F;tmp&#x2F;hosts&#x2F;odhcpd&#39;</span><br><span class="line">option leasetrigger &#39;&#x2F;usr&#x2F;sbin&#x2F;odhcpd-update&#39;</span><br><span class="line"></span><br><span class="line">config dhcp &#39;wan6&#39;</span><br><span class="line">option interface &#39;wan&#39;</span><br><span class="line">option dhcpv6 &#39;hybrid&#39;</span><br><span class="line">option ra &#39;hybrid&#39;</span><br><span class="line">option ndp &#39;hybrid&#39;</span><br><span class="line">option master &#39;1&#39;</span><br></pre></td></tr></table></figure><p>修改后保存并重启路由器即可。</p><h1 id="3-后话"><a href="#3-后话" class="headerlink" title="3.后话"></a>3.后话</h1><p><del>配置后好像 dns 出了一些问题，在访问其他校内以.byr.cn 或.bupt.edu.cn 为后缀的网址显示 dns 错误，如果有大牛解决了这个 DNS 问题，可以分享一下思路。</del></p><p>2018.9.9 更新：后话所述问题已经解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本教程测试过程基于 Newifi Y2 路由器，系统为 PandoraBox，理论上 OpenWrt 原生同样适用。&lt;/p&gt;
&lt;h1 id=&quot;1-修改路由器的软件源&quot;&gt;&lt;a href=&quot;#1-修改路由器的软件源&quot; class=&quot;headerlink&quot; title=&quot;1.修改
      
    
    </summary>
    
    
      <category term="杂项" scheme="https://study4.fun/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="网络配置" scheme="https://study4.fun/tags/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/"/>
    
      <category term="IPV6" scheme="https://study4.fun/tags/IPV6/"/>
    
  </entry>
  
</feed>
